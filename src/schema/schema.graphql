enum Role{
    USER 
    ADMIN
}

type user{
    id: Int!,
    name: String!,
    email: String!,
    role: Role!,
    cvs: [cv!]
}

type cv{
    id: Int!,
    name: String!,
    age: Int!,
    job: String!,
    user: user!,
    skills:[skill!]
}
type skill{
    id: Int!,
    designation: String!,
    cvs:[cv!]
}

type Query {
    cvs:[cv],
    cvById(id: Int):cv,
}

input cvInput{
    name: String,
    age: Int,
    job: String,
    idUser:Int
}
input cvUpdate{
    id: Int,
    name: String,
    age: Int,
    job: String,
    idUser:Int
}

type Mutation {
    addCv(input: cvInput) :[cv],
    updateCv(input: cvUpdate):cv,
    deleteCv(id: Int):[cv]
}


type Subscription{
    cvSubscription: SubOutput
}

type SubOutput {
    msg: String!,
    cv: cv!
}